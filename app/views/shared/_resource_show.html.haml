- require 'cgi'
%div.py-3.pl-3.hide-if-loading
  %table.minimal.concept_details{cellpadding: "0", cellspacing: "0", width: "100%"}
    = yield
    - concept_properties = concept_properties2hash(properties) # see concepts_helper.rb
    - keys = concept_properties.keys
    - top_set=[]
    - bottom_set=[]
    - leftover=[]
    - scheme_set=[]
    - scheme_keys ||= []
    - for key in keys
      - key = key.to_s
      - top=false
      - bottom=false
      - scheme=false
      - top_keys.each do |top_key|
        - if key.downcase.include?(top_key)
          - top_set << key
          - top=true
      - bottom_keys.each do |bottom_key|
        - if key.downcase.include?(bottom_key)
          - bottom_set << key
          - bottom=true
      - scheme_keys.each do |scheme_key|
        - if key.downcase.include?(scheme_key)
          - scheme_set << key
          - scheme=true
      - if !top && !bottom && !scheme
        - leftover << key
    - leftover.sort! {|x,y| x.downcase <=> y.downcase }

    -# TOP set of properties
    - for key in top_set
      - key = key.to_s
      - next if exclude_relation?(key)
      - if concept_properties[key]
        - data = concept_properties[key]
        - values = data[:values]
        %tr
          %td{nowrap: ""}= "#{remove_owl_notation(key)}"
          %td
            -# Note: get_link_for_cls_ajax is in application_helper.rb, it calls auto_link when necessary.
            - ajax_links = values.map {|v| get_link_for_cls_ajax(v, @ontology.acronym, '_blank') }
            = "<p>#{sanitize(ajax_links.join('</p><p>'))}</p>".html_safe
    -# LEFTOVER set of properties
    - for key in leftover
      - next if exclude_relation?(key, @ontology)
      - if concept_properties[key]
        - data = concept_properties[key]
        - values = data[:values]
        %tr
          %td{nowrap: ""}= "#{remove_owl_notation(key)}"
          %td
            -# NCBO-648 Note: a property with complex values might return an array of nils from the REST-API client code.
            -# If we use values.compact or values.any? we may miss exceptions on data that should be handled better.
            -# Note: get_link_for_cls_ajax is in application_helper.rb, it calls auto_link when necessary.
            - ajax_links = values.map {|v| get_link_for_cls_ajax(v, @ontology.acronym, '_blank') }
            = "<p>#{sanitize(ajax_links.join('</p><p>'))}</p>".html_safe

    -# Scheme set of properties
    - for key in scheme_set
      - key = key.to_s
      - next if exclude_relation?(key)
      - if concept_properties[key]
        - data = concept_properties[key]
        - values = data[:values]
        %tr
          %td{nowrap: ""}= "#{remove_owl_notation(key)}"
          %td
            - ajax_links = values.map {|v| get_link_for_scheme_ajax(v, @ontology.acronym, '_blank') }
            = "<p>#{ajax_links.join('</p><p>')}</p>".html_safe


    -# BOTTOM set of properties
    - for key in bottom_set
      - next if exclude_relation?(key)
      - if concept_properties[key]
        - data = concept_properties[key]
        - values = data[:values]
        %tr
          %td{nowrap: ""}= "#{remove_owl_notation(key)}"
          %td
            -# Note: get_link_for_cls_ajax is in application_helper.rb, it calls auto_link when necessary.
            - ajax_links = values.map {|v| get_link_for_cls_ajax(v, @ontology.acronym, '_blank')}
            = "<p>#{ajax_links.join('</p><p>')}</p>".html_safe

:javascript
  $( document ).ready(function() {
    ajax_process_cls_init()
  })