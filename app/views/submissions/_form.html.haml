- button_text ||= "Add submission"
- title_text ||= "Add New Submission"
- # Load bootstrap for this page from public/stylesheets
%link{:type => "text/css", :rel => "stylesheet", :href => "/stylesheets/bootstrap.css"}
%link{:type => "text/css", :rel => "stylesheet", :href => "/stylesheets/bootstrap-theme.css"}

:javascript
  jQuery(function(){
    jQuery(".datepicker").datepicker({
      showOn: 'button',
      buttonImage: "#{image_path('calendar.gif')}",
      buttonImageOnly: true,
      buttonText: 'Choose a release date',
      dateFormat: 'yy-mm-dd'
    });
  });

  // Show/hide location inputs
  function location_toggle(input_div) {
    jQuery('.hidden_field').hide();
    jQuery('.hidden_field input').attr("disabled", true);
    jQuery('#' + input_div + " input").removeAttr("disabled");
    jQuery('#' + input_div).show();
  }

  jQuery(document).ready(function(){
    // Properly display the information for 'File Location' based on radio button
    if (jQuery("#submission_isRemote_0").is(":checked")) {
      location_toggle("upload");
    }
    if (jQuery("#submission_isRemote_1").is(":checked")) {
      location_toggle("remote");
    }
    // Select default 'File Location' radio button
    if (!jQuery("#submission_isRemote_0").is(":checked") && !jQuery("#submission_isRemote_1").is(":checked") && !jQuery("#submission_isRemote_2").is(":checked")) {
      jQuery("#submission_isRemote_0").attr("checked", "checked")
    }
    // Handles showing/hiding options for a particular ontology format
    jQuery("#submission_hasOntologyLanguage").change(ontologyFormatChange);
    // Check to see if owl is selected, show options if so
    ontologyFormatChange();
    jQuery("#ontology_submission_form").validate();

    jQuery('#add_contact_button').click(function(event) {
      addContact();
      event.preventDefault();
    })
  });

  function ontologyFormatChange(format){
    var selected = jQuery("#submission_hasOntologyLanguage option:selected");

    switch(selected.val()){
      case 'OWL':
        jQuery(".format_options").optionsOut("fast");
        jQuery("#owl_options").optionsIn("fast");
        break;
      default:
        jQuery(".format_options").optionsOut("fast");
    }
  }

  jQuery.fn.optionsIn = function(speed, easing, callback){
    jQuery("#format_spacing").css("margin", "1em 0");
    this.fadeIn(speed);
  };

  jQuery.fn.optionsOut = function(speed, easing, callback){
    this.css("display", "none");
    jQuery("#format_spacing").css("margin", "0");
  };

  function addContact() {
    var contact = jQuery(jQuery("#contacts").children(".contact")[0]);
    var newContact = jQuery(jQuery("<div>").html(contact.html()).addClass("contact"));
    newContact.children("input").each(function(){
      var index =  jQuery("#contacts").children(".contact").length;
      var newId = jQuery(this).attr("id").replace(/0/g, index);
      var newName = jQuery(this).attr("name").replace(/0/g, index);
      jQuery(this).attr("id", newId).attr("name", newName).attr("value", "")
    })
    jQuery("#contacts").append(newContact);
  }

- unless @errors.nil?
  .enable-lists{:style => "color:red;"}
    %strong Errors On Form
    %ul
      - for error in @errors
        %li
          = error

%div
  %div#editMetadataDiv{:style => "width: 50%;margin: 3em auto;"}
    %span.asterik{:style => "float:right;"} * fields are required
    %h1{:style => "text-align: center;"} #{title_text}
    = hidden_field :submission, :ontology, value: @ontology.id
    %table#new_ontology.form{style: "min-width: 800px;"}

      %tr
        %th
          Format
          %span.asterik *
        %td
          - ont_formats = [ "OBO", "OWL", "UMLS", "SKOS" ].sort
          - selected = @submission.hasOntologyLanguage ? @submission.hasOntologyLanguage : "OWL"
          = select("submission", "hasOntologyLanguage", ont_formats, { :selected => selected, :style => "width: 200px;", :required => true })
          #format_spacing
          %table#format_specific_options
            %tbody#owl_options.format_options
              %tr
                %th
                  Preferred Name Property
                  %br/
                  %span.default_owl
                    default:
                    %a{:href => "http://www.w3.org/2004/02/skos/core#prefLabel", :target => "_blank"} http://www.w3.org/2004/02/skos/core#prefLabel
                %td
                  = text_field :submission, :prefLabelProperty, :placeholder => 'use default', value: @submission.prefLabelProperty
              %tr
                %th
                  Synonym Property
                  %br/
                  %span.default_owl
                    default:
                    %a{:href => "http://www.w3.org/2004/02/skos/core#altLabel", :target => "_blank"} http://www.w3.org/2004/02/skos/core#altLabel
                %td
                  = text_field :submission, :synonymProperty, :placeholder => 'use default', value: @submission.synonymProperty
              %tr
                %th
                  Definition Property
                  %br/
                  %span.default_owl
                    default:
                    %a{:href => "http://www.w3.org/2004/02/skos/core#definition", :target => "_blank"} http://www.w3.org/2004/02/skos/core#definition
                %td
                  = text_field :submission, :definitionProperty, :placeholder => 'use default', value: @submission.definitionProperty
              %tr
                %th
                  Author Property
                  %br/
                  %span.default_owl
                    default:
                    %a{:href => "http://purl.org/dc/elements/1.1/creator", :target => "_blank"} http://purl.org/dc/elements/1.1/creator
                %td
                  = text_field :submission, :authorProperty, :placeholder => 'use default', value: @submission.authorProperty
              %tr{:style => "border-left: none;"}
                %td{:colspan => "2", :style => "border-left: none; border-right: none; padding: 1.5em 0 .5em;"}
                  %b Determining Obsolete Classes
                  You can use the following two methods to identify obsolete classes in your ontology:
                  %br/
                  1. Designate a root ID for an obsolete branch.
                  %br/
                  2. Identify a property id that indicates obsolete status. The value must be set to "true".
              %tr
                %th
                  1. Root of obsolete branch (root is not obsolete)
                %td
                  = text_field :submission, :obsoleteParent, value: @submission.obsoleteParent
              %tr
                %th
                  2. Property to check for obsolete status
                %td
                  = text_field :submission, :obsoleteProperty, value: @submission.obsoleteProperty
      %tr
        %th
          Location
          %span.asterik *
        %td#location_options
          - if !@masterFileOptions
            - checked = @ontology.summaryOnly
            = radio_button :submission, :isRemote, 3, :onclick=>"$('.hidden_field').hide();", checked: checked
            Metadata Only
            %br/
            %span{:style => "font-size:11px;"}
              (choose this option if you want users to search and view only the
              %em metadata
              for your ontology, but not its classes and properties)
            %hr/

            - checked = !( @submission.pullLocation.nil? || @submission.pullLocation.empty? )
            = radio_button :submission, :isRemote, 1, :onclick=>"location_toggle('remote');", checked: checked
            Load from URL
            %br/
            %span{:style => "font-size:11px;"} (new versions loaded daily)
            - display = (checked and "" or "display:none;")
            %div.hidden_field#remote{style: display}
              URL: #{text_field :submission, :pullLocation, :size => 100, value: @submission.pullLocation}
            %hr/

            - checked = (!@ontology.summaryOnly) && @submission.pullLocation.nil?
            = radio_button :submission, :isRemote, 0, :onclick=>"location_toggle('upload');", checked: checked
            Upload Local File
            %br/
            %span{:style => "font-size:11px;"} (choose a file on your local file system to upload)
            - display = (checked and "" or "display:none;")
            %div.hidden_field#upload{style: display}
              #{f.file_field :filePath}

          - else
            = radio_button :submission, :isRemote, 0, :onclick=>"location_toggle('upload');", checked: true
            Upload Local File
            %br/
            %span{:style => "font-size:11px;"} (choose a file on your local file system to upload)
            - display = (checked and "" or "display:none;")
            %div#upload{style: display}
              = f.file_field :filePath, required: true
              = f.select("masterFileName", @masterFileOptions, { include_blank: "Select primary file from zip contents", required: true}, {style: "border-color: red;"})

  %div{:class => "row", style: "width: 50%; margin: 0 auto;"}
    %div{:class => "panel panel-primary"}
      %div{:class => "panel-heading"}
        %h3{:class => "panel-title"} Key properties
      %div{:class => "panel-body"}

        %div
          = generate_attribute_label("URI")
          = raw generate_attribute_input("URI")

        %div
          = generate_attribute_label("status")
          %span.asterik *
          - selected_status = @submission.status ? @submission.status : "alpha"
          - status_options = ["alpha", "beta", "production", "retired"]
          = select :submission, :status, status_options, { :selected => selected_status, :required => true }

        %div
          = generate_attribute_label("version")
          = raw generate_attribute_input("version")

        %div
          = generate_attribute_label("hasOntologySyntax")
          %div{:style => "float:left;width:50%;"}
            = select("submission", "hasOntologySyntax", [["None", "none"]].concat($ONTOLOGY_SYNTAXES.collect{ |k, v| [v,k] }), { :selected => @submission.hasOntologySyntax })
          %div{:style => "float:right;width:50%;text-align:right;"}
            Properties taken from
            = link_to "W3C URIs for file format", "https://www.w3.org/ns/formats/", target: "_blank"

        %div
          = generate_attribute_label("hasFormalityLevel")
          %div{:style => "float:left;width:50%;"}
            = select("submission", "hasFormalityLevel", [["None", "none"]].concat($FORMALITY_LEVELS.collect{ |k, v| [v,k] }), { :selected => @submission.hasFormalityLevel })
          %div{:style => "float:right;width:50%;text-align:right;"}
            Properties taken from
            = link_to "DCMI KOS type vocabularies", "http://wiki.dublincore.org/index.php/NKOS_Vocabularies#KOS_Types_Vocabulary", target: "_blank"

        %div
          = generate_attribute_label("isOfType")
          %div{:style => "float:left;width:50%;"}
            = select("submission", "isOfType", [["None", "none"]].concat($IS_OF_TYPE.collect{ |k, v| [v,k] }), { :selected => @submission.isOfType })

        %div
          = generate_attribute_label("naturalLanguage")
          %div{:style => "float:left;width:50%;"}
            = select_tag "naturalLanguageSelect[]", options_for_select($NATURAL_LANGUAGES.collect{ |k, v| [v,k] }, @submission.naturalLanguage),
            :multiple => 'true', "data-placeholder".to_sym => "Click here to select ontologies",:style => "margin-bottom: 15px;", :id => 'naturalLanguageSelect'
            %br
            %button#naturalLanguageBtn{:style => "margin-bottom: 0.5em;margin-top: 0.5em;", :type => "button", :class => "btn btn-info", :onclick => 'addInput("naturalLanguage", "text")'} Add new language
            %div#naturalLanguageDiv

          %div{:style => "float:right;width:50%;text-align:right;"}
            Add a natural language to the list
            %br
            Consider using a
            = link_to "Lexvo URI", "http://www.lexvo.org", target: "_blank"
            with ISO639-3 code
            %br
            e.g.: http://lexvo.org/id/iso639-3/eng

    %div{:class => "panel panel-primary"}
      %div{:class => "panel-heading"}
        %h3{:class => "panel-title"} Description
      %div{:class => "panel-body"}
        %div
          = generate_attribute_label("description")
          %span.asterik *
          %br
          = text_area :submission, :description, rows: 5, value: @submission.description, :required => true

        %div{:style => "text-align: center;"}
          %button#detailsBtn{:style => "margin-top: 1em;", :type => "button", :class => "btn btn-success", :onclick => "toggleDiv('details')"} More details metadata

        %div#detailsDiv{:style => "margin-top: 1em;display: none;"}
          %div
            %label Abstract
            %br
            = text_area :submission, :abstract, rows: 3, value: @submission.abstract
          %div
            = generate_attribute_label("notes")
            %br
            = text_area :submission, :notes, rows: 3, value: @submission.abstract
          %div
            = generate_attribute_label("keywords")
            = raw generate_attribute_input("keywords")

        %div
          = generate_attribute_label("homepage")
          = raw generate_attribute_input("homepage")
        %div
          = generate_attribute_label("documentation")
          = raw generate_attribute_input("documentation")
        %div
          = generate_attribute_label("publication")
          = raw generate_attribute_input("publication")
        %div
          = generate_attribute_label("usedOntologyEngineeringTool")
          %div
            - if @submission.usedOntologyEngineeringTool.nil? || @submission.usedOntologyEngineeringTool.eql?("")
              = select("submission", "usedOntologyEngineeringTool", [["None", "none"]].concat($ONTOLOGY_TOOLS.collect{ |k, v| [v,k] }), { :selected => "none" })
              = text_field :submission, :ontologyToolText, :style => 'display:none;margin-top:7px;'
            - elsif $ONTOLOGY_TOOLS.include?(@submission.usedOntologyEngineeringTool)
              = select("submission", "usedOntologyEngineeringTool", [["None", "none"]].concat($ONTOLOGY_TOOLS.collect{ |k, v| [v,k] }), { :selected => @submission.usedOntologyEngineeringTool })
              = text_field :submission, :ontologyToolText, :style => 'display:none;margin-top:7px;'
            - else
              = select("submission", "usedOntologyEngineeringTool", [["None", "none"]].concat($ONTOLOGY_TOOLS.collect{ |k, v| [v,k] }), { :selected => "other" })
              = text_field :submission, :ontologyToolText, :style => 'margin-top:7px;', value: @submission.usedOntologyEngineeringTool

        %div{:style => "text-align: center;"}
          %button#descriptionBtn{:style => "margin-top: 1em;", :type => "button", :class => "btn btn-success", :onclick => "toggleDiv('description')"} More description metadata

        %div#descriptionDiv{:style => "margin-top: 2em;display: none;"}
          - for attr in @metadata
            - if attr["display"].eql? "description"
              = generate_attribute_label(attr["attribute"])
              = raw generate_attribute_input(attr["attribute"])
              %br

    %div{:class => "panel panel-primary"}
      %div{:class => "panel-heading"}
        %h3{:class => "panel-title"} Dates
      %div{:class => "panel-body"}
        %div
          %label Release date
          %span.asterik *
          = text_field :submission, :released, :class => "datepicker", value: "#{@submission.released}", :required => true
          %span{:style => "font-size: 90%; color: grey;"}
        %div
          %label Modification date
          = raw generate_attribute_input("modificationDate")
        - for attr in @metadata
          - if attr["display"].eql? "dates"
            = generate_attribute_label(attr["attribute"])
            = raw generate_attribute_input(attr["attribute"])
            %br
    %div{:class => "panel panel-primary"}
      %div{:class => "panel-heading"}
        %h3{:class => "panel-title"} Licenses
      %div{:class => "panel-body"}
        %div
          = generate_attribute_label("hasLicense")
          %div
            - if @submission.hasLicense.nil? || @submission.hasLicense.eql?("")
              = select("submission", "hasLicense", [["None", "none"]].concat($LICENSES.collect{ |k, v| [v,k] }), { :selected => "none" })
              = text_field :submission, :licenseText, :style => 'display:none;margin-top:7px;'
            - elsif $LICENSES.include?(@submission.hasLicense)
              = select("submission", "hasLicense", [["None", "none"]].concat($LICENSES.collect{ |k, v| [v,k] }), { :selected => @submission.hasLicense })
              = text_field :submission, :licenseText, :style => 'display:none;margin-top:7px;'
            - else
              = select("submission", "hasLicense", [["None", "none"]].concat($LICENSES.collect{ |k, v| [v,k] }), { :selected => "other" })
              = text_field :submission, :licenseText, :style => 'margin-top:7px;', value: @submission.hasLicense

          %div{:style => "float:right;width:50%;text-align:right;"}
            Consider using a
            = link_to "URI to describe your License", "http://rdflicense.appspot.com", target: "_blank"
            %br
            Consider using
            = link_to "INRIA licentia", "http://licentia.inria.fr/", target: "_blank"
            to choose your license

        %div
          = generate_attribute_label("copyrightHolder")
          = raw generate_attribute_input("copyrightHolder")
        %div
          = generate_attribute_label("morePermissions")
          = raw generate_attribute_input("morePermissions")

    %div{:class => "panel panel-default"}
      %div{:class => "panel-heading"}
        %h3{:class => "panel-title"} Community
      %div{:class => "panel-body"}
        %label Contact
        %span.asterik *
        %div#contacts
          %div#contact_button{style: "float: right; margin-top -1em;"}
            = button_to 'Add contact', '#', id: 'add_contact_button', class: "btn btn-info"
          - if @submission.contact
            - @submission.contact.each_with_index do |contact, i|
              %div.contact
                Name:&nbsp;
                = text_field :submission, :"contact[#{i}][name]", value: contact["name"]
                %br
                Email:&nbsp;
                = text_field :submission, :"contact[#{i}][email]", value: contact["email"]
          - else
            %div.contact
              Name:&nbsp;
              = text_field :submission, :"contact[0][name]", :required => true
              %br
              Email:&nbsp;
              = text_field :submission, :"contact[0][email]", :required => true

        %div
          = generate_attribute_label("publisher")
          = raw generate_attribute_input("publisher")
        %div
          = generate_attribute_label("hasContributor")
          = raw generate_attribute_input("hasContributor")
        %div
          = generate_attribute_label("hasCreator")
          = raw generate_attribute_input("hasCreator")
        %div{:style => "text-align: center;"}
          %button#communityBtn{:style => "margin-top: 1em;", :type => "button", :class => "btn btn-success", :onclick => "toggleDiv('community')"} More community metadata

        %div#communityDiv{:style => "margin-top: 2em;display: none;"}
          - for attr in @metadata
            - if attr["display"].eql? "community"
              = generate_attribute_label(attr["attribute"])
              = raw generate_attribute_input(attr["attribute"])
              %br

    %div{:class => "panel panel-primary"}
      %div{:class => "panel-heading"}
        %h3{:class => "panel-title"} Ontology relations
      %div{:class => "panel-body"}
        %div
          = generate_attribute_label("useImports")
          = raw generate_attribute_input("useImports")
        %div{:style => "text-align: center;"}
          %button#relationsBtn{:style => "margin-top: 1em;", :type => "button", :class => "btn btn-success", :onclick => "toggleDiv('relations')"} More relations metadata

        %div#relationsDiv{:style => "margin-top: 2em;display: none;"}
          - for attr in @metadata
            - if attr["display"].eql? "relations"
              = generate_attribute_label(attr["attribute"])
              = raw generate_attribute_input(attr["attribute"])
              %br

    %div{:class => "panel panel-primary"}
      %div{:class => "panel-heading"}
        %h3{:class => "panel-title"} Ontology content
      %div{:class => "panel-body"}
        %div
          = generate_attribute_label("preferredNamespacePrefix")
          = raw generate_attribute_input("preferredNamespacePrefix")
        %div
          = generate_attribute_label("preferredNamespaceUri")
          = raw generate_attribute_input("preferredNamespaceUri")

        %div{:style => "text-align: center;"}
          %button#contentBtn{:style => "margin-top: 1em;", :type => "button", :class => "btn btn-success", :onclick => "toggleDiv('content')"} More content metadata

        %div#contentDiv{:style => "margin-top: 2em;display: none;"}
          - for attr in @metadata
            - if attr["display"].eql? "content"
              = generate_attribute_label(attr["attribute"])
              = raw generate_attribute_input(attr["attribute"])
              %br


  %div{:style => "text-align: center;"}
    = submit_tag button_text, {:style => "margin-top: 2em;margin-bottom: 2em;", :class => "ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"}

:javascript

  $(function() {
    $('#submission_hasLicense').change(function() {
      if ($('#submission_hasLicense').val() == "other") {
        $('#submission_licenseText').val("");
        $('#submission_licenseText').show();
      } else {
        $('#submission_licenseText').val($('#submission_hasLicense').val());
        $('#submission_licenseText').hide();
      }
    });
    $('#submission_usedOntologyEngineeringTool').change(function() {
      if ($('#submission_usedOntologyEngineeringTool').val() == "other") {
        $('#submission_ontologyToolText').val("");
        $('#submission_ontologyToolText').show();
      } else {
        $('#submission_ontologyToolText').val($('#submission_usedOntologyEngineeringTool').val());
        $('#submission_ontologyToolText').hide();
      }
    });
    $('#naturalLanguageSelect').change(function() {
      if ($('#naturalLanguageSelect').val() == "other") {
        $('#submission_naturalLanguage').val("");
        $('#submission_naturalLanguage').show();
      } else {
        $('#submission_naturalLanguage').val($('#naturalLanguageSelect').val());
        $('#submission_naturalLanguage').hide();
      }
    });
  })

  /**
   * To add a new input when btn clicked. Using the given attribute to get elements id
   */
  function addInput(attr, inputType)
  {
    var container = document.createElement("div");
    container.innerHTML = '<input type="' + inputType + '" name="added' + attr + '[]" id="added' + attr + '" style="margin-bottom: 0.3em;"><br>';
    document.getElementById(attr + 'Div').appendChild(container);
  }

  /**
   * To show/hide the simple metadata div
   */
  function toggleDiv(divId)
  {
    var e = document.getElementById(divId + "Div");
    if (e.style.display == 'block') {
      e.style.display = 'none';
      document.getElementById(divId + "Btn").innerText = "More " + divId + " metadata";
    } else {
      e.style.display = 'block';
      document.getElementById(divId + "Btn").innerText = "Hide metadata";
    }
  }

  /**
   * For natural language multiple select
   */
  jQuery(document).ready(function() {
    "use strict";
    jQuery("#naturalLanguageSelect").chosen({
      search_contains: true
    });
  });