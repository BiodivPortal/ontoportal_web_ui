
/*
class CreateMapping {
    #concept_to_id;
    #ontology_to;
    #concept_from_id;
    #ontology_from;
    #mapping_comment;
    #mapping_relation;
    #mapping_type;

    constructor(ontology_to, concept_to_id, type) {
        this.#mapping_type = type;
        this.#mapping_relation = jQuery("#mapping_relation");
        this.#mapping_comment = jQuery("#mapping_comment");
        this.#ontology_from = jQuery("#map_from_bioportal_ontology_id");
        this.#concept_from_id = jQuery("#map_from_bioportal_full_id");
        this.#ontology_to = ontology_to
        this.#concept_to_id = concept_to_id
    }

    get sourceOntology() {
        return this.#ontology_from.val()
    }

    get targetOntology() {
        return this.#ontology_to
    }

    get sourceConceptURI() {
        return this.#concept_from_id.val()
    }

    get targetConceptURI() {
        return this.#concept_to_id.val()
    }

    get relation() {
        return this.#mapping_relation.val()
    }

    get comment() {
        return this.#mapping_comment.val()
    }

    validations(errors) {
        return []
    }

    validate() {
        const error = jQuery("#create_mapping_error");
        let errors = ["<b>Problem creating mapping:</b>"];

        errors = this.validations(errors)


        if (errors.length > 1)
            error.html(errors.join("<br/>"));

        return errors.length > 1;
    }

    isEmpty(val) {
        return val === ""
    }
}

class CreateInternalMapping extends CreateMapping {
    validations(errors) {
        if (this.isEmpty(this.targetConceptURI)) {
            errors.push("Please select a target class");
        }

        if (this.isEmpty(this.sourceConceptURI)) {
            errors.push("Please select a from class");
        }
        return errors
    }
}

class CreateExternalMapping extends CreateInternalMapping {
    validations(errors) {
        errors = super.validations(errors);
        this.targetOntology.split(':').forEach((val) => {
            if (this.isEmpty(val)) {
                errors.push("Please select a target ontology");
            }
        })
        return errors
    }
}
class CreateInterPortalMapping extends CreateExternalMapping {}

*/


var observer = new MutationObserver(function (mutations) {
    mutations.forEach(function (mutation) {
        if (mutation.addedNodes.length > 0) {
            var elem = document.querySelector("#map_to_picker");
            if (elem != null) {
                resetAutocompleter(elem.options[elem.selectedIndex].value);
            }
        }
    });
});

jQuery(document).ready(function () {

    var targetNode = document.querySelector(".createNewMappingModal, .modal-body");
    if (targetNode != null) {
        observer.observe(targetNode, {childList: true});
    }

    /*
    jQuery("body").on("change", "#map_to_picker", function(e) {
      resetAutocompleter(jQuery(this).val());
      jQuery("#map_to_concept_details_table").html("");
    });
    */

    jQuery("input.search_autocomplete").live("autocomplete_selected", function () {
        var input = jQuery(this);
        if (input.val() != input.attr("title") && input.val() !== "") {
            getClassDetails(this);
        }
    });

    /*
    jQuery("input.search_autocomplete").blur(function () {
        var input = jQuery(this);
        setTimeout(function () {
            if (input.val() == "" || input.val() == input.attr("title")) {
                jQuery("#" + input.attr("id") + "_concept_details").hide();
            }
        }, 1);
    });
    */

    jQuery("input.search_autocomplete").each(function () {
        var input = jQuery(this);
        if (input.val() != input.attr("title") && input.val() != "") {
            getClassDetails(this);
        }
    });


    // TODO: Can we get rid of calls to deprecated "live" method?

    // Wire up popup for advanced options
    //create_mapping_advanced_options.init();

});

// Also in bp_mappings.js
function updateMappingDeletePermissions() {
    var mapping_permission_checkbox = jQuery("#delete_mappings_permission");
    if (mapping_permission_checkbox.length === 0) {
        //console.error("Failed to select #delete_mappings_permission");
        jQuery("#delete_mappings_button").hide();
        jQuery(".delete_mappings_column").hide();
        jQuery("input[name='delete_mapping_checkbox']").prop('disabled', true);
    } else {
        // Ensure the permission checkbox is hidden.
        mapping_permission_checkbox.hide();
        if (mapping_permission_checkbox.is(':checked')) {
            jQuery("#delete_mappings_button").show();
            jQuery(".delete_mappings_column").show();
            jQuery("input[name='delete_mapping_checkbox']").prop('disabled', false);
        } else {
            jQuery("#delete_mappings_button").hide();
            jQuery(".delete_mappings_column").hide();
            jQuery("input[name='delete_mapping_checkbox']").prop('disabled', true);
        }
    }
    jQuery("input[name='delete_mapping_checkbox']").prop('checked', false);
}

function getClassDetails(input) {
    var current_ont_id = null;
    var current_concept_id = null;
    if (jQuery('#external_mapping').val() == 'true') {
        current_ont_id = jQuery("#map_from_bioportal_ontology_id").val();
        current_concept_id = jQuery("#map_from_bioportal_full_id").val();
        map_to_concept_details_table_id = '#map_from_concept_details_table';
    } else {
        current_ont_id = jQuery("#map_to_bioportal_ontology_id").val();
        current_concept_id = jQuery("#map_to_bioportal_full_id").val();
        map_to_concept_details_table_id = '#map_to_concept_details_table';
    }
    jQuery(map_to_concept_details_table_id).html('<%= image_tag("spinners/spinner_000000_16px.gif", style: "padding: 5px;") %>');
    jQuery(map_to_concept_details_table_id).load("/ajax/class_details?ontology=" + encodeURIComponent(current_ont_id) + "&styled=false&conceptid=" + encodeURIComponent(current_concept_id));
}

function resetAutocompleter(ontologyId) {
    var input = jQuery("#map_to");
    input[0].autocompleter.flushCache();
    input[0].autocompleter.getExtraParams()["id"] = ontologyId;
    input.val("");
}

function resetMappingUIWithFacebox() {
    jQuery('#mappings_content a[rel*=facebox]').facebox();
    resetMappingUI();
}

function resetMappingUI() {
    // Set map_from to the new class from the tree
    jQuery("#map_from_bioportal_full_id").val(jQuery("#sd_content a.active").attr("id"));

    jQuery("#map_to_concept_details").html("");
    jQuery("#create_mapping_success_messages").html("");
    jQuery("a.link_button, input.link_button").button();
    updateMappingDeletePermissions();
}

var bp_createMapping = {
    create: function () {

        if (jQuery('#external_mapping').val() == 'true') {
            bp_createExternalMapping.create();
            return;
        }

        bp_createMapping.reset();

        jQuery("#create_mapping_spinner").show();


        mapping_type = jQuery(".mapping_radio:checked").val()

        let mapping = null
        switch (mapping_type) {
            case "interportal":
                ontology_to = jQuery("#map_to_interportal").val() + "/ontologies/" + jQuery("#map_to_interportal_ontology").val();
                concept_to_id = jQuery("#map_to_interportal_class");
                mapping = new CreateInterPortalMapping(ontology_to, concept_to_id, mapping_type)
                break
            case "external":
                ontology_to = jQuery("#map_to_external_ontology").val();
                concept_to_id = jQuery("#map_to_external_class");
                mapping = new CreateExternalMapping(ontology_to, concept_to_id, mapping_type)
                break
            default:
                ontology_to = jQuery("#map_to_bioportal_ontology_id");
                concept_to_id = jQuery("#map_to_bioportal_full_id");
                mapping = new CreateInternalMapping(ontology_to.val(), concept_to_id, mapping_type)

        }

        const errored = mapping.validate();

        if (errored) {
            jQuery("#create_mapping_spinner").hide();
            return false;
        }

        const params = {
            mapping_type: mapping_type,
            map_from_bioportal_ontology_id: mapping.sourceOntology,
            map_to_bioportal_ontology_id: mapping.targetOntology,
            map_from_bioportal_full_id: mapping.sourceConceptURI,
            map_to_bioportal_full_id: mapping.targetConceptURI,
            mapping_comment: mapping.comment,
            mapping_relation: mapping.relation
        };

        jQuery.ajax({
            url: "/mappings",
            type: "POST",
            data: params,
            success: bp_createMapping.success,
            error: bp_createMapping.error
        });
    },

    success: function (data) {
        var ontology_id = jQuery("#map_from_bioportal_ontology_id").val();
        var source_class_id = jQuery("#map_from_bioportal_full_id").val();

        jQuery("#create_mapping_spinner").hide();
        jQuery("#create_mapping_success_messages").show()
        jQuery("#create_mapping_success_messages").prepend(jQuery("<div/>").addClass("success_message").html(
            "Mapping from <b>" + jQuery("#new_mapping_btn").data("concept-label") + "</b> to <b>" + jQuery("#map_to").val() + "</b> was created"
        ));

        // If we have a concept mapping table, update it with new mappings
        if (document.getElementById("concept_mappings_tables_div") != null) {
            var url = "/ajax/mappings/get_concept_table?ontologyid=" + jQuery(document).data().bp.ont_viewer.ontology_id + "&conceptid=" + encodeURIComponent(getClassesConceptId());
            jQuery("#concept_mappings_tables_div").load(url, function () {
                jQuery("#mapping_count").html(jQuery("#mapping_details tbody tr:visible").size());
            });
        }

        jQuery.bioportal.ont_pages["mappings"].retrieve_and_publish();
        updateMappingDeletePermissions();
    },

    error: function (data) {
        jQuery("#create_mapping_spinner").hide();
        jQuery("#create_mapping_error").show()
        if (data.responseText !== undefined && data.responseText !== null) {
            jQuery("#create_mapping_error").html(data.responseText);
        } else {
            jQuery("#create_mapping_error").html("There was a problem creating the mapping, please try again");
        }
    },

    reset: function () {
        jQuery("#create_mapping_error").html("");
    }
}

var bp_popup_mapping_init = function (e) {
    bp_popup_mapping_cleanup();
    e.preventDefault();
    e.stopPropagation()

    var popup = jQuery(e.currentTarget).parents(".popup_container");
    var popup_list = popup.children(".bp_popup_mapping_list");

    popup.children(".bp_popup_link_container").addClass("bp_popup_shadow");
    popup.find("a.bp_popup_link").css("z-index", "5000").addClass("bp_popup_link_active");

    // popup fade if the user click outside of it
    jQuery("body").click(function () {
        jQuery(".bp_popup_mapping_list").fadeOut().removeClass("active");
    });
    jQuery(".bp_popup_mapping_list").click(function (e) {
        e.stopPropagation();
    });

    popup.children(".bp_popup_mapping_list").show();

    // Check for dropping off edge of screen
    if (popup_list.width() + popup_list.offset().left > jQuery(window).width()) {
        popup_list.css("left", "-250px");
    }

}

var bp_popup_mapping_cleanup = function () {
    jQuery(".bp_popup_link_container").removeClass("bp_popup_shadow");
    jQuery(".bp_popup_link").css("z-index", "").removeClass("bp_popup_link_active");
}

// Popup for advanced options
var create_mapping_advanced_options = {
    init: function () {
        jQuery("#create_mapping_advanced").live("click", function (e) {
            bp_popup_mapping_init(e)
        });
        jQuery("#create_mapping_advanced_options").click(function (e) {
            e.stopPropagation()
        });
        this.cleanup();
    },

    cleanup: function () {
        jQuery("html").click(bp_popup_mapping_cleanup);
        jQuery(document).keyup(function (e) {
            if (e.keyCode == 27) {
                bp_popup_mapping_cleanup();
            } // esc
        });
    }

}


var bp_createExternalMapping = {
    create: function () {
        bp_createExternalMapping.reset();
        jQuery("#create_mapping_spinner").show();
        var errored = bp_createExternalMapping.validate();

        /*
        var relation_array = new Array();
        jQuery.each(jQuery("input[name='mapping_relations']:checked"), function() {
            relation_array.push(jQuery(this).val());
        });

        if (jQuery("#relation_text_box").val() != "") {
            relation_array.push(jQuery("#relation_text_box").val());
        }
        */

        if (errored) {
            jQuery("#create_mapping_spinner").hide();
            return false;
        }

        var mapping_type = jQuery(".mapping_radio:checked").val();


        var params = {
            mapping_type: mapping_type,
            map_from_bioportal_ontology_id: ontology_from.val(),
            map_to_bioportal_ontology_id: ontology_to,
            map_from_bioportal_full_id: concept_from_id.val(),
            map_to_bioportal_full_id: concept_to_id.val(),
            mapping_comment: mapping_comment.val(),
            mapping_relation: mapping_relation.val(),
            mapping_bidirectional: mapping_bidirectional
        };

        jQuery.ajax({
            url: "/mappings",
            type: "POST",
            data: params,
            success: bp_createExternalMapping.success,
            error: bp_createExternalMapping.error
        });
    },

    success: function (data) {
        jQuery("#create_mapping_spinner").hide();
        if (jQuery(".mapping_radio:checked").val() == "interportal") {
            jQuery("#create_mapping_success_messages").prepend(jQuery("<div/>").addClass("success_message").html(
                "Mapping from <b>" + jQuery("#map_from").val() + "</b> to <b>" + jQuery("#map_to_interportal_class").val() + "</b> was created"
            ));
        } else {
            jQuery("#create_mapping_success_messages").prepend(jQuery("<div/>").addClass("success_message").html(
                "Mapping from <b>" + jQuery("#map_from").val() + "</b> to <b>" + jQuery("#map_to_external_class").val() + "</b> was created"
            ));
        }

        // If we have a concept mapping table, update it with new mappings by calling the get_concept_table of mappings_controller.rb
        if (document.getElementById("concept_mappings_tables_div") != null) {
            var url = "/ajax/mappings/get_concept_table?ontologyid=" + jQuery(document).data().bp.ont_viewer.ontology_id + "&conceptid=" + encodeURIComponent(getClassesConceptId());
            jQuery("#concept_mappings_tables_div").load(url, function () {
                jQuery("#mapping_count").html(jQuery("#mapping_details tbody tr:visible").size());
            });
        }

        // Clear the map to side
        jQuery("#map_to_concept_details").hide();

        jQuery.bioportal.ont_pages["mappings"].retrieve_and_publish();
        updateMappingDeletePermissions();
    },

    error: function (data) {
        jQuery("#create_mapping_spinner").hide();
        if (data.responseText !== undefined && data.responseText !== null) {
            jQuery("#create_mapping_error").html(data.responseText);
        } else {
            jQuery("#create_mapping_error").html("There was a problem creating the mapping, please try again");
        }
    },

    validate: function () {
        var concept_from_input = jQuery("#map_from");
        var concept_to_input = jQuery("#map_to_class");
        var error = jQuery("#create_mapping_error");
        var errors = ["<b>Problem creating mapping:</b>"];
        var errored = false;

        if (concept_from_input.val() == "" || concept_from_input.val() == concept_from_input.attr("title")) {
            errors.push("Please select class to map from");
            errored = true;
        }
        /*
                if (concept_to_input.val() == "" || concept_to_input.val() == concept_to_input.attr("title")) {
                    errors.push("Please select class to map to");
                    errored = true;
                }
        */
        if (errors.length > 1)
            jQuery("#create_mapping_error").html(errors.join("<br/>"));

        return errored;
    },

    reset: function () {
        jQuery("#create_mapping_error").html("");
    }
}

